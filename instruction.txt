1 Установка питон.
    - Проверка, установлен ли питон
        $ python3 --version
        Python 3.6.1
    - Установка питон
        $ sudo apt install python3
2 Установка джанго
    - Первоначальная директория
        $ mkdir djangogirls
        $ cd djangogirls
    - Создание виртуальное окружение
        $ python3 -m venv myvenv
    - Запуск виртуальное окружение
        $ source myvenv/bin/activate
    - Установа джанго
        (myvenv) ~$ python3 -m pip install --upgrade pip
    - Установка библиотек через указание требований
        Создать файл requirements.txt внутри первоначальной директории
        djangogirls
        └───requirements.txt
        В файл djangogirls/requirements.txt нужно добавить такой текст: Django~=3.2.10
        Теперь выполни команду pip install -r requirements.txt, чтобы установить Django.

 Вот и всё! Теперь ты (наконец-то) готова создать своё Django-приложени

 3 Твой первый проект на Джанго
 (myvenv) ~/djangogirls$ django-admin startproject mysite .
    - Изменяем настройки
        TIME_ZONE = 'Europe/Moscow'
        LANGUAGE_CODE = 'ru-ru'
        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
        ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']
    - Настройка базы данных
    Существует множество различных баз данных, которые могут хранить данные для твоего сайта. Мы будем использовать стандартную — sqlite3.
    - Создание базы данных
        python manage.py migrate.
    - Запуск веб-сервера
        python manage.py runserver

 4 Модели джанго
 Нам нужно что-то, что будет хранить все записи нашего блога. Но прежде давай поговорим о вещах, называемых объектами.
    -Объекты
    Если мы хотим смоделировать кошку, то создадим объект Cat, который обладает определенными свойствами, например, color (цвет), age (возраст),
    mood (настроение: плохое, хорошее, сонное ;)), owner (хозяин, например, другой объект — Person — или, если кошка дикая, это свойство будет пустым).
    - Модели
    Модель в Django — это объект определённого свойства: он хранится в базе данных. База данных представляет собой совокупность различных данных.
    Это то место, где ты будешь хранить информацию о своих пользователях, записях в блоге и т.д.

    -Создание приложения
        (myvenv) ~/djangogirls$ python manage.py startapp blog
   После того, как приложение создано, нам нужно сообщить Django, что теперь он должен его использовать. Мы сделаем это с помощью файла mysite/settings.py.
   Нам нужно найти INSTALLED_APPS и добавить к списку 'blog', прямо перед ].

    - Создание модели записи в блоге
        В файле blog/models.py мы определяем все Модели — модель записи для блога также пойдёт сюда.

    - Создаём таблицы моделей в базе данных
        Последним шагом будет добавление нашей модели в базу данных. Сначала мы должны дать Django знать, что сделали изменения в нашей модели
        (мы её только что создали!). Набери python manage.py makemigrations blog.

        Django создал для нас файл с миграцией для базы данных. Набери python manage.py migrate blog

5  Администрирование Django
    Чтобы добавлять, редактировать и удалять записи, для которых мы только что создали модель, мы используем панель управления администратора Django.
        Давай откроем файл blog/admin.py и заменим его содержимое на:

    blog/admin.py
    from django.contrib import admin
    from .models import Post

    admin.site.register(Post)

    - Создание суперпользователя
        python manage.py createsuperuser

 6 Публикация в интернет
    До настоящего момента твой сайт был доступен только для локального просмотра, теперь же ты узнаешь, как развернуть его на удалённом сервере!
    Развертывание (deploy) — это процесс публикации приложения в интернете, чтобы люди могли наконец увидеть твое творение :
    Как ты уже знаешь, веб-сайт должен располагаться на сервере. Есть много компаний, предоставляющих сервера в интернете. Мы воспользуемся услугами одной из них,
    с довольно простым процессом публикации: PythonAnywhere. PythonAnywhere бесплатен для маленьких приложений с небольшим числом посетителей.

    Другим внешним сервисом, которым мы воспользуемся, будет GitHub — сервис хостинга кода. практически у каждого программиста есть GitHub аккаунт

    В итоге твой код будет в трёх местах. На локальном компьютере ты будешь заниматься разработкой и тестированием. Когда результат тебя устроит,
    ты загрузишь свою программу на GitHub. А твой сайт будет на PythonAnywhere, и ты сможешь обновлять его, просто загружая новую версию кода с GitHub.

    - Установка гит
        $ sudo apt install git
    - Создаём Git-репозиторий
        $ git init
        Initialized empty Git repository in ~/djangogirls/.git/
        $ git config --global user.name "Your Name"
        $ git config --global user.email you@example.com

    нужно создать файл .gitignore в корневом каталоге репозитория. Открой редактор и создай новый файл со следующим содержанием:
    *.pyc
    *~
    __pycache__
    myvenv
    db.sqlite3
    /static
    .DS_Store

    Используй команду git status перед git add или в любой другой момент, когда ты не уверена, что изменения — хорошая идея.
    Это убережёт тебя от таких неприятных сюрпризов, как добавление неправильных файлов. Команда git status возвращает информацию
    обо всех ранее неотслеживаемых/изменённых/добавленных в git файлах, а также статус ветки и многое другое. Результат должен быть похож на: